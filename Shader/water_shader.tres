[gd_resource type="VisualShader" load_steps=17 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
uniform_name = "TextureUniform"
texture_type = 1
color_default = 1

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "time"

[sub_resource type="VisualShaderNodeTexture" id=3]
source = 2

[sub_resource type="VisualShaderNodeInput" id=4]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeColorConstant" id=5]
constant = Color( 0.118255, 0.0599213, 0.300781, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=6]
constant = Color( 0.142422, 0.738281, 0.319318, 1 )

[sub_resource type="VisualShaderNodeVectorDecompose" id=7]

[sub_resource type="VisualShaderNodeScalarFunc" id=8]
function = 0

[sub_resource type="VisualShaderNodeVectorCompose" id=9]
default_input_values = [ 0, 1.0, 1, 0.0, 2, 0.0 ]

[sub_resource type="VisualShaderNodeVectorOp" id=10]

[sub_resource type="VisualShaderNodeVectorOp" id=11]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0.8, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "time"

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=14]

[sub_resource type="VisualShaderNodeScalarOp" id=15]
default_input_values = [ 0, 0.0, 1, 5.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=16]
default_input_values = [ 0, 0.0, 1, 6.0 ]
operator = 2

[resource]
code = "shader_type canvas_item;



void vertex() {
// Input:4
	float n_out4p0 = TIME;

// ScalarOp:9
	float n_in9p1 = 6.00000;
	float n_out9p0 = n_out4p0 * n_in9p1;

// Input:5
	vec3 n_out5p0 = vec3(VERTEX, 0.0);

// ScalarOp:8
	float n_in8p1 = 5.00000;
	float n_out8p0 = dot(n_out5p0, vec3(0.333333, 0.333333, 0.333333)) + n_in8p1;

// VectorOp:7
	vec3 n_out7p0 = vec3(n_out9p0) + vec3(n_out8p0);

// ScalarFunc:10
	float n_out10p0 = sin(dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333)));

// VectorCompose:11
	float n_in11p2 = 0.00000;
	vec3 n_out11p0 = vec3(n_out10p0, n_out10p0, n_in11p2);

// VectorOp:13
	vec3 n_in13p1 = vec3(0.00000, 0.80000, 0.00000);
	vec3 n_out13p0 = n_out11p0 * n_in13p1;

// VectorOp:12
	vec3 n_out12p0 = n_out13p0 + n_out5p0;

// Output:0
	VERTEX = n_out12p0.xy;

}

void fragment() {
// Output:0

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -110.385, 310 )
mode = 1
flags/light_only = false
nodes/vertex/0/position = Vector2( 940, 540 )
nodes/vertex/4/node = SubResource( 12 )
nodes/vertex/4/position = Vector2( 20, -120 )
nodes/vertex/5/node = SubResource( 13 )
nodes/vertex/5/position = Vector2( -80, 380 )
nodes/vertex/7/node = SubResource( 14 )
nodes/vertex/7/position = Vector2( 420, -40 )
nodes/vertex/8/node = SubResource( 15 )
nodes/vertex/8/position = Vector2( 240, 100 )
nodes/vertex/9/node = SubResource( 16 )
nodes/vertex/9/position = Vector2( 180, -40 )
nodes/vertex/10/node = SubResource( 8 )
nodes/vertex/10/position = Vector2( 700, -20 )
nodes/vertex/11/node = SubResource( 9 )
nodes/vertex/11/position = Vector2( 660, 140 )
nodes/vertex/12/node = SubResource( 10 )
nodes/vertex/12/position = Vector2( 680, 540 )
nodes/vertex/13/node = SubResource( 11 )
nodes/vertex/13/position = Vector2( 420, 360 )
nodes/vertex/connections = PoolIntArray( 5, 0, 8, 0, 8, 0, 7, 1, 9, 0, 7, 0, 4, 0, 9, 0, 10, 0, 11, 1, 7, 0, 10, 0, 5, 0, 12, 1, 12, 0, 0, 0, 11, 0, 13, 0, 13, 0, 12, 0, 10, 0, 11, 0 )
nodes/fragment/0/position = Vector2( 860, 60 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( -20, 220 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( 700, 240 )
nodes/fragment/6/node = SubResource( 4 )
nodes/fragment/6/position = Vector2( -60, 40 )
nodes/fragment/7/node = SubResource( 5 )
nodes/fragment/7/position = Vector2( 540, -100 )
nodes/fragment/8/node = SubResource( 6 )
nodes/fragment/8/position = Vector2( 220, 200 )
nodes/fragment/9/node = SubResource( 7 )
nodes/fragment/9/position = Vector2( 160, 60 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 440, 60 )
nodes/fragment/connections = PoolIntArray( 6, 0, 9, 0, 8, 1, 10, 1, 9, 1, 10, 0 )
